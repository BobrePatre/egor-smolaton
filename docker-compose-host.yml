version: "3.8"
name: "smolaton"

services:
  traefik:
    image: traefik:v2.9
    container_name: traefik
    command:
      - "--api.insecure=true"  # You can disable this in production
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=georgiy.gus@yandex.ru"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"     # HTTP
      - "443:443"   # HTTPS
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt:/letsencrypt
    networks:
      - backend-network
      - auth-network

  backend-database:
    image: postgres
    environment:
      POSTGRES_PASSWORD: smolaton
      POSTGRES_USER: smolaton
    ports:
      - "5432:5432"
    volumes:
      - businessdata:/var/lib/postgresql/data
    networks:
      - backend-network

  backend:
    build:
      context: .
      dockerfile: Dockerfile-backend
    depends_on:
      - backend-database
    labels:
      - "traefik.http.routers.backend.rule=Host(`backend.my-creative.my-vm.work`)"  # Replace with your domain
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.services.backend.loadbalancer.server.port=2000"
    environment:
      - POSTGRES_HOST=backend-database
      - POSTGRES_DB=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_PASSWORD=smolaton
      - POSTGRES_USER=smolaton
      - KEYCLOAK_CORE_CLIENT_ID=smolaton-client
      - KEYCLOAK_MANAGE_CLIENT_ID=manage-client
      - KEYCLOAK_MANAGE_CLIENT_SECRET=smolaton
      - KEYCLOAK_REALM=smolaton
      - KEYCLOAK_HOST=http://auth:8080
    networks:
      - backend-network
    restart: unless-stopped


networks:
  auth-network:
  backend-network:

volumes:
  userdata:
  businessdata:
  letsencrypt:  # For SSL certificates storage
